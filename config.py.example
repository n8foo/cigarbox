# Statement for enabling the development environment
DEBUG = True

# Define the application directory
import os
BASE_DIR = os.path.abspath(os.path.dirname(__file__))

# Photo archive directory
# local
LOCALARCHIVEPATH='static/cigarbox'
REMOTEARCHIVEPATH='static/cigarbox'

# API
UPLOAD_FOLDER='/tmp/cigarbox'
#ALLOWED_EXTENSIONS = ['jpg']
ALLOWED_EXTENSIONS = ['mov', 'mp4', 'png', 'jpg', 'jpeg', 'gif', 'm4v']

# For directory tagging, ignore these directories/tags
IGNORETAGS = ['Users','username','Pictures','exports','events']

# AWS Credentials
# IMPORTANT: Never commit real credentials to git!
# Get your credentials from https://console.aws.amazon.com/iam/
AWS_ACCESS_KEY_ID = 'YOUR_AWS_ACCESS_KEY_ID'
AWS_SECRET_ACCESS_KEY = 'YOUR_AWS_SECRET_ACCESS_KEY'
S3_BUCKET_NAME='your-bucket-name'
# Should we store your originals publicly? Probably not
AWSPOLICY = 'private'

# Define the database - we are working with
# SQLite for this example

DATABASE={'name'  :'photos.db',
          'engine':'peewee.SqliteDatabase'}

# Secret Key
# IMPORTANT: Change this to a random string in production!
# Generate with: python -c 'import secrets; print(secrets.token_hex(32))'
SECRET_KEY='change-this-to-a-random-secret-key'

# API Configuration
# API Key for authentication
# IMPORTANT: Change this to a secure random key!
# Generate with: python -c 'import secrets; print(secrets.token_urlsafe(32))'
API_KEY='your-api-key-here'

# API URL for cli/upload.py script (optional, defaults to localhost)
# For production with subpath: 'https://yourdomain.com/pictures/api'
# For local Docker testing: 'http://localhost:8088/api'
# Can also be set via CIGARBOX_API_URL environment variable
# API_URL='http://localhost:9601/api'

# Nginx Configuration (for production deployments)
# Used by fabric tasks to find nginx logs
# Set NGINX_DOMAIN to your domain name (e.g., 'example.com')
# Logs will be checked at /var/log/nginx/{domain}-access.log and {domain}-error.log
NGINX_DOMAIN = None  # e.g., 'example.com' or None to skip domain-specific logs

# Flask-Security-Too Configuration
# IMPORTANT: Change SECURITY_PASSWORD_SALT to a random string in production!
# Generate with: python -c 'import secrets; print(secrets.token_hex(32))'
SECURITY_PASSWORD_SALT = 'change-this-to-a-random-salt'
SECURITY_PASSWORD_HASH = 'bcrypt'
SECURITY_PASSWORD_SINGLE_HASH = True  # Use plain bcrypt without HMAC wrapper
SECURITY_REGISTERABLE = False  # Only admins can create users
SECURITY_SEND_REGISTER_EMAIL = False
SECURITY_TRACKABLE = False  # Disable login tracking (requires additional DB fields)
SECURITY_CHANGEABLE = True  # Allow password changes
SECURITY_RECOVERABLE = False  # No email-based password recovery (for now)
SECURITY_USE_PERMISSIONS = False  # Disable Flask-Principal permissions system
SECURITY_LOGIN_URL = '/login'
SECURITY_LOGOUT_URL = '/logout'
SECURITY_POST_LOGIN_VIEW = '/'
SECURITY_POST_LOGOUT_VIEW = '/'

# Session Configuration - Keep users logged in for 360 days
from datetime import timedelta
PERMANENT_SESSION_LIFETIME = timedelta(days=360)
SESSION_COOKIE_SECURE = False  # Set to True if using HTTPS
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_SAMESITE = 'Lax'

PRIVACYFLAGS = {'public':0, 'friends':1, 'family':2, 'private':8, 'disabled':9}

PER_PAGE=100

PORT=9600
# SITEURL is dynamically generated by get_base_url()

# Application threads. A common general assumption is
# using 2 per available processor cores - to handle
# incoming requests using one and performing background
# operations using the other.
THREADS_PER_PAGE = 2

# Enable protection agains *Cross-site Request Forgery (CSRF)*
CSRF_ENABLED     = True

# Use a secure, unique and absolutely secret key for
# signing the data.
CSRF_SESSION_KEY = 'secret'

# Secret key for signing cookies
SECRET_KEY = 'secret'

#  MAX Upload Size
MAX_CONTENT_LENGTH = 16 * 1024 * 1024
